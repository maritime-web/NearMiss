package dk.dma.nearmiss.engine.geometry.geometries;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;

import static junit.framework.TestCase.assertTrue;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;

@RunWith(MockitoJUnitRunner.class)
public class EllipticSafetyZoneTest {

    // Debugging tips
    // Use https://www.latlong.net/Show-Latitude-Longitude.html to show position on map
    // Use http://arthur-e.github.io/Wicket/sandbox-gmaps3.html to visualize WKT on map

    public EllipticSafetyZoneTest() {
    }

    @Test
    public void canProduceWellKnownText() {
        EllipticSafetyZone e = new EllipticSafetyZone(10.0, 55.0, 0.010, 0.005, 0.0);
        assertEquals("POLYGON ((10.0025 55, 10.002495066821071 55.000313952597644, 10.002480286753286 55.000626666167825, 10.002455718126821 55.00093690657293, 10.002421457902821 55.001243449435826, 10.002377641290737 55.00154508497187, 10.00232444121472 55.001840622763424, 10.002262067631165 55.002128896457826, 10.002190766700108 55.00240876837051, 10.002110819813755 55.002679133974894, 10.002022542485937 55.002938926261464, 10.00192628310694 55.00318711994875, 10.001822421568553 55.00342273552965, 10.001711367764822 55.00364484313711, 10.00159355997437 55.00385256621388, 10.00146946313073 55.00404508497188, 10.001339566987447 55.00422163962751, 10.001204384185254 55.00438153340022, 10.001064448228913 55.00452413526233, 10.000920311381712 55.00464888242944, 10.000772542485937 55.00475528258148, 10.000621724717911 55.004842915805646, 10.000468453286464 55.00491143625364, 10.000313333083911 55.00496057350657, 10.000156976298824 55.004990133642146, 10 55.005, 9.999843023701176 55.004990133642146, 9.999686666916089 55.00496057350657, 9.999531546713536 55.00491143625364, 9.999378275282089 55.004842915805646, 9.999227457514063 55.00475528258148, 9.999079688618288 55.00464888242944, 9.998935551771087 55.00452413526233, 9.998795615814746 55.00438153340022, 9.998660433012553 55.00422163962751, 9.99853053686927 55.00404508497188, 9.99840644002563 55.00385256621388, 9.998288632235178 55.00364484313711, 9.998177578431447 55.00342273552965, 9.99807371689306 55.00318711994875, 9.997977457514063 55.002938926261464, 9.997889180186245 55.002679133974894, 9.997809233299892 55.00240876837051, 9.997737932368835 55.002128896457826, 9.99767555878528 55.001840622763424, 9.997622358709263 55.00154508497187, 9.997578542097179 55.001243449435826, 9.997544281873179 55.00093690657293, 9.997519713246714 55.000626666167825, 9.997504933178929 55.000313952597644, 9.9975 55, 9.997504933178929 54.999686047402356, 9.997519713246714 54.999373333832175, 9.997544281873179 54.99906309342707, 9.997578542097179 54.998756550564174, 9.997622358709263 54.99845491502813, 9.99767555878528 54.998159377236576, 9.997737932368835 54.997871103542174, 9.997809233299892 54.99759123162949, 9.997889180186245 54.997320866025106, 9.997977457514063 54.997061073738536, 9.99807371689306 54.99681288005125, 9.998177578431447 54.99657726447035, 9.998288632235178 54.99635515686289, 9.99840644002563 54.99614743378612, 9.99853053686927 54.99595491502812, 9.998660433012553 54.99577836037249, 9.998795615814746 54.99561846659978, 9.998935551771087 54.99547586473767, 9.999079688618288 54.99535111757056, 9.999227457514063 54.99524471741852, 9.999378275282089 54.995157084194354, 9.999531546713536 54.99508856374636, 9.999686666916089 54.99503942649343, 9.999843023701176 54.995009866357854, 10 54.995, 10.000156976298824 54.995009866357854, 10.000313333083911 54.99503942649343, 10.000468453286464 54.99508856374636, 10.000621724717911 54.995157084194354, 10.000772542485937 54.99524471741852, 10.000920311381712 54.99535111757056, 10.001064448228913 54.99547586473767, 10.001204384185254 54.99561846659978, 10.001339566987447 54.99577836037249, 10.00146946313073 54.99595491502812, 10.00159355997437 54.99614743378612, 10.001711367764822 54.99635515686289, 10.001822421568553 54.99657726447035, 10.00192628310694 54.99681288005125, 10.002022542485937 54.997061073738536, 10.002110819813755 54.997320866025106, 10.002190766700108 54.99759123162949, 10.002262067631165 54.997871103542174, 10.00232444121472 54.998159377236576, 10.002377641290737 54.99845491502813, 10.002421457902821 54.998756550564174, 10.002455718126821 54.99906309342707, 10.002480286753286 54.999373333832175, 10.002495066821071 54.999686047402356, 10.0025 55))", e.toWkt());

        e = new EllipticSafetyZone(10.0, 55.0, 0.010, 0.005, 45.0);
        assertEquals("POLYGON ((10.001767766952966 54.998232233047034, 10.001986276679453 54.99845771934207, 10.00219694747934 54.99868929231428, 10.00239894793122 54.998926038050904, 10.002591480831576 54.9991670222247, 10.00277378634103 54.99941129378121, 10.002945144983016 54.99965788869223, 10.00310488048327 54.99990583376028, 10.003252362438737 55.00015415045945, 10.003387008805518 55.00040185879719, 10.003508288195931 55.00064798118185, 10.003615721975613 55.00089154628081, 10.003708886152523 55.001131592853916, 10.003787413050219 55.001367173547, 10.003850992758906 55.001597358630704, 10.003899374358532 55.00182123966965, 10.003932366909012 55.002037933107665, 10.003949840203838 55.00224658375474, 10.003951725283883 55.00244636816212, 10.003938014709604 55.00263649787199, 10.003908762590385 55.00281622252926, 10.003864084370953 55.00298483284283, 10.003804156375843 55.003141663384795, 10.003729215113474 55.003286095216666, 10.003639556342769 55.003417558332, 10.003535533905932 55.00353553390594, 10.003417558332004 55.003639556342776, 10.003286095216666 55.003729215113474, 10.003141663384788 55.00380415637585, 10.00298483284282 55.00386408437096, 10.002816222529262 55.003908762590385, 10.002636497871983 55.00393801470962, 10.002446368162111 55.00395172528389, 10.002246583754747 55.00394984020384, 10.002037933107658 55.00393236690902, 10.001821239669646 55.00389937435854, 10.001597358630697 55.00385099275891, 10.001367173547003 55.00378741305022, 10.001131592853916 55.00370888615252, 10.000891546280812 55.00361572197562, 10.000647981181842 55.00350828819594, 10.000401858797183 55.00338700880553, 10.000154150459444 55.003252362438744, 9.999905833760273 55.00310488048328, 9.99965788869222 55.00294514498302, 9.999411293781215 55.00277378634103, 9.99916702222469 55.00259148083158, 9.998926038050904 55.00239894793122, 9.998689292314268 55.00219694747935, 9.99845771934207 55.00198627667946, 9.998232233047034 55.001767766952966, 9.99801372332054 55.00154228065793, 9.997803052520652 55.001310707685725, 9.99760105206878 55.0010739619491, 9.997408519168424 55.00083297777531, 9.99722621365897 55.00058870621879, 9.997054855016977 55.00034211130777, 9.99689511951673 55.00009416623973, 9.996747637561263 54.99984584954055, 9.996612991194475 54.99959814120281, 9.996491711804069 54.99935201881816, 9.99638427802438 54.99910845371919, 9.99629111384747 54.99886840714609, 9.996212586949774 54.998632826453004, 9.996149007241094 54.9984026413693, 9.996100625641468 54.998178760330354, 9.996067633090988 54.99796206689234, 9.996050159796162 54.99775341624526, 9.996048274716117 54.99755363183789, 9.996061985290389 54.99736350212801, 9.996091237409615 54.99718377747074, 9.996135915629047 54.99701516715718, 9.996195843624157 54.99685833661521, 9.99627078488652 54.996713904783334, 9.996360443657224 54.996582441668, 9.996464466094068 54.99646446609407, 9.99658244166799 54.99636044365723, 9.996713904783327 54.99627078488653, 9.996858336615212 54.99619584362416, 9.99701516715718 54.99613591562905, 9.997183777470738 54.99609123740962, 9.99736350212801 54.99606198529039, 9.997553631837889 54.99604827471612, 9.997753416245253 54.99605015979617, 9.997962066892342 54.99606763309099, 9.998178760330354 54.99610062564147, 9.998402641369303 54.996149007241094, 9.99863282645299 54.99621258694978, 9.998868407146077 54.99629111384748, 9.999108453719181 54.99638427802439, 9.999352018818158 54.99649171180407, 9.99959814120281 54.996612991194475, 9.999845849540556 54.99674763756126, 10.000094166239727 54.99689511951673, 10.000342111307774 54.997054855016984, 10.000588706218785 54.997226213658976, 10.00083297777531 54.997408519168424, 10.001073961949096 54.99760105206879, 10.001310707685725 54.99780305252065, 10.001542280657922 54.99801372332055, 10.001767766952966 54.998232233047034))", e.toWkt());
    }

    @Test
    public void intersectsSelf() {
        EllipticSafetyZone e = new EllipticSafetyZone(10.0, 55.0, 20, 10, 0.0);
        assertTrue(e.intersects(e));
    }

    @Test
    public void intersectsNotDistantEllipse() {
        EllipticSafetyZone e1 = new EllipticSafetyZone(10.0, 55.0, 20, 10, 0.0);
        EllipticSafetyZone e2 = new EllipticSafetyZone(-10.0, -55.0, 20, 10, 0.0);

        assertFalse(e1.intersects(e2));
        assertFalse(e2.intersects(e1));
    }

    @Test
    public void intersectsContainedEllipse() {
        EllipticSafetyZone e1 = new EllipticSafetyZone(10.0, 55.0, 20, 10, 0.0);
        EllipticSafetyZone e2 = new EllipticSafetyZone(10.0, 55.0, 19999, 9999, 0.0);

        assertTrue(e1.intersects(e2));
        assertTrue(e2.intersects(e1));
    }

    @Test
    public void intersectsIdenticalRotatedEllipse() {
        EllipticSafetyZone e1 = new EllipticSafetyZone(10.0, 55.0, 20, 10, 0.0);
        EllipticSafetyZone e2 = new EllipticSafetyZone(10.0, 55.0, 20, 10, 45.0);

        assertTrue(e1.intersects(e2));
        assertTrue(e2.intersects(e1));
    }

    @Test
    public void correctlyDetectsIntersectionOfEllipsesPlacedVerticallyAboveEachOther() {
        EllipticSafetyZone e1 = new EllipticSafetyZone(10.0, 55.0, 5, 2, 0.0);

        EllipticSafetyZone e2;

        e2 = new EllipticSafetyZone(10.0, 60.01, 5, 2, 0.0);
        assertFalse(e1.intersects(e2));
        assertFalse(e2.intersects(e1));

        e2 = new EllipticSafetyZone(10.0, 59.99, 5, 2, 0.0);
        assertTrue(e1.intersects(e2));
        assertTrue(e2.intersects(e1));
    }

    @Test
    public void correctlyDetectsIntersectionOfEllipsesPlacedHorizontallyNextToEachOther() {
        EllipticSafetyZone e1 = new EllipticSafetyZone(10.0, 55.0, 5, 2, 0.0);

        EllipticSafetyZone e2;

        e2 = new EllipticSafetyZone(7.99, 55.0, 5, 2, 0.0);
        assertFalse(e1.intersects(e2));
        assertFalse(e2.intersects(e1));

        e2 = new EllipticSafetyZone(8.01, 55.0, 5, 2, 0.0);
        assertTrue(e1.intersects(e2));
        assertTrue(e2.intersects(e1));
    }

}