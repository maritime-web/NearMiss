package dk.dma.nearmiss.engine;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import static junit.framework.TestCase.assertTrue;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;

@RunWith(SpringRunner.class)
@SpringBootTest
public class EllipseTest {

    // Debugging tips
    // Use https://www.latlong.net/Show-Latitude-Longitude.html to show position on map
    // Use http://arthur-e.github.io/Wicket/sandbox-gmaps3.html to visualize WKT on map

    public EllipseTest() {
    }

    @Test
    public void canProduceWellKnownText() {
        Ellipse e = new Ellipse(55.0, 10.0, 40000, 5000, 0.0);
        assertEquals("POLYGON ((10.041666666666666 55, 10.041584447017843 55.011301389404125, 10.041338112554769 55.02255817738738, 10.040928635447028 55.03372593855035, 10.040357631713693 55.04476059884177, 10.039627354845631 55.05561860949873, 10.03874068691201 55.066257118913725, 10.037701127186084 55.076634141750375, 10.03651277833516 55.08670872464034, 10.03518033022925 55.09644110780759, 10.033709041432289 55.10579288198208, 10.032104718448991 55.114727139983565, 10.030373692809224 55.12320862237737, 10.028522796080361 55.13120385662732, 10.026559332906196 55.138681289196505, 10.024491052178853 55.145611410074686, 10.022326116457458 55.15196686924082, 10.020073069754238 55.157722584601125, 10.017740803815212 55.162855840976604, 10.015338523028529 55.1673463797495, 10.012875708098957 55.17117647881482, 10.01036207863187 55.17433102252135, 10.007807554774406 55.176797561326254, 10.00522221806518 55.17856636092773, 10.002616271647055 55.179630440681834, 10 55.179985601151905, 9.997383728352945 55.179630440681834, 9.99477778193482 55.17856636092773, 9.992192445225594 55.176797561326254, 9.98963792136813 55.17433102252135, 9.987124291901043 55.17117647881482, 9.984661476971471 55.1673463797495, 9.982259196184788 55.162855840976604, 9.979926930245762 55.157722584601125, 9.977673883542542 55.15196686924082, 9.975508947821147 55.145611410074686, 9.973440667093804 55.138681289196505, 9.971477203919639 55.13120385662732, 9.969626307190776 55.12320862237737, 9.967895281551009 55.114727139983565, 9.966290958567711 55.10579288198208, 9.96481966977075 55.09644110780759, 9.96348722166484 55.08670872464034, 9.962298872813916 55.076634141750375, 9.96125931308799 55.066257118913725, 9.960372645154369 55.05561860949873, 9.959642368286307 55.04476059884177, 9.959071364552972 55.03372593855035, 9.958661887445231 55.02255817738738, 9.958415552982157 55.011301389404125, 9.958333333333334 55, 9.958415552982157 54.988698610595875, 9.958661887445231 54.97744182261262, 9.959071364552972 54.96627406144965, 9.959642368286307 54.95523940115823, 9.960372645154369 54.94438139050127, 9.96125931308799 54.933742881086275, 9.962298872813916 54.923365858249625, 9.96348722166484 54.91329127535966, 9.96481966977075 54.90355889219241, 9.966290958567711 54.89420711801792, 9.967895281551009 54.885272860016435, 9.969626307190776 54.87679137762263, 9.971477203919639 54.86879614337268, 9.973440667093804 54.861318710803495, 9.975508947821147 54.854388589925314, 9.977673883542542 54.84803313075918, 9.979926930245762 54.842277415398875, 9.982259196184788 54.837144159023396, 9.984661476971471 54.8326536202505, 9.987124291901043 54.82882352118518, 9.98963792136813 54.82566897747865, 9.992192445225594 54.823202438673746, 9.99477778193482 54.82143363907227, 9.997383728352945 54.820369559318166, 10 54.820014398848095, 10.002616271647055 54.820369559318166, 10.00522221806518 54.82143363907227, 10.007807554774406 54.823202438673746, 10.01036207863187 54.82566897747865, 10.012875708098957 54.82882352118518, 10.015338523028529 54.8326536202505, 10.017740803815212 54.837144159023396, 10.020073069754238 54.842277415398875, 10.022326116457458 54.84803313075918, 10.024491052178853 54.854388589925314, 10.026559332906196 54.861318710803495, 10.028522796080361 54.86879614337268, 10.030373692809224 54.87679137762263, 10.032104718448991 54.885272860016435, 10.033709041432289 54.89420711801792, 10.03518033022925 54.90355889219241, 10.03651277833516 54.91329127535966, 10.037701127186084 54.923365858249625, 10.03874068691201 54.933742881086275, 10.039627354845631 54.94438139050127, 10.040357631713693 54.95523940115823, 10.040928635447028 54.96627406144965, 10.041338112554769 54.97744182261262, 10.041584447017843 54.988698610595875, 10.041666666666666 55))", e.toWkt());

        e = new Ellipse(55.0, 10.0, 40000, 5000, 45.0);
        assertEquals("POLYGON ((10.029462782549437 55.02946278254944, 10.021413355393722 55.03739593356269, 10.013279419507104 55.045181499910754, 10.005093075818476 55.05278875552013, 9.996886632086397 55.06018767802836, 9.988692475395112 55.06734906726855, 9.980542944337525 55.07424466050909, 9.972470201389555 55.08084724399376, 9.964506105979531 55.08713076034197, 9.956682088753592 55.093070411385376, 9.949029027533268 55.09864275603487, 9.941577125454849 55.10382580279188, 9.934355791771388 55.108599096538775, 9.927393525787817 55.11294379926583, 9.920717804387223 55.116842764416305, 9.914354973592115 55.120280604556, 9.90833014458875 55.1232437521005, 9.902667094624725 55.12572051286018, 9.897388173171041 55.12770111219183, 9.892514213718961 55.12917773357475, 9.888064451559757 55.13014454945895, 9.88405644787175 55.13059774426382, 9.880506020414426 55.13053552943651, 9.877427181102917 55.12995815051053, 9.874832080709403 55.12886788613671, 9.87273096090955 55.12726903909045, 9.87113211386329 55.1251679192906, 9.870041849489468 55.12257281889708, 9.86946447056349 55.11949397958557, 9.869402255736183 55.11594355212825, 9.869855450541053 55.11193554844024, 9.870822266425243 55.10748578628103, 9.872298887808167 55.10261182682896, 9.874279487139823 55.097332905375275, 9.87675624789949 55.09166985541124, 9.879719395443995 55.08564502640788, 9.883157235583695 55.07928219561278, 9.887056200734168 55.07260647421218, 9.891400903461228 55.06564420822861, 9.896174197208119 55.05842287454515, 9.901357243965126 55.05097097246673, 9.90692958861462 55.043317911246405, 9.91286923965803 55.03549389402047, 9.919152756006241 55.027529798610445, 9.925755339490909 55.01945705566247, 9.932650932731448 55.01130752460489, 9.939812321971633 55.0031133679136, 9.947211244479863 54.99490692418152, 9.954818500089242 54.9867205804929, 9.962604066437304 54.978586644606274, 9.970537217450563 54.97053721745056, 9.978586644606278 54.9626040664373, 9.986720580492896 54.954818500089246, 9.994906924181524 54.94721124447986, 10.003113367913603 54.93981232197163, 10.01130752460488 54.93265093273145, 10.019457055662468 54.92575533949092, 10.027529798610445 54.91915275600624, 10.035493894020469 54.91286923965803, 10.043317911246401 54.90692958861463, 10.050970972466725 54.90135724396514, 10.058422874545151 54.89617419720812, 10.065644208228608 54.89140090346123, 10.072606474212183 54.887056200734165, 10.079282195612777 54.883157235583695, 10.085645026407885 54.87971939544399, 10.091669855411244 54.87675624789949, 10.097332905375268 54.87427948713982, 10.102611826828959 54.87229888780817, 10.107485786281032 54.87082226642525, 10.111935548440243 54.86985545054105, 10.115943552128243 54.86940225573618, 10.119493979585567 54.8694644705635, 10.122572818897076 54.870041849489475, 10.125167919290597 54.87113211386329, 10.12726903909045 54.87273096090955, 10.12886788613671 54.8748320807094, 10.129958150510525 54.877427181102924, 10.130535529436504 54.88050602041443, 10.13059774426381 54.88405644787175, 10.130144549458947 54.88806445155976, 10.12917773357475 54.89251421371897, 10.127701112191833 54.89738817317104, 10.12572051286017 54.902667094624725, 10.123243752100503 54.90833014458875, 10.120280604556005 54.91435497359211, 10.116842764416305 54.92071780438722, 10.112943799265832 54.927393525787814, 10.108599096538768 54.934355791771395, 10.103825802791881 54.94157712545485, 10.098642756034867 54.94902902753327, 10.093070411385373 54.956682088753595, 10.08713076034197 54.96450610597953, 10.080847243993759 54.972470201389555, 10.074244660509084 54.98054294433753, 10.067349067268545 54.98869247539511, 10.060187678028367 54.996886632086394, 10.052788755520137 55.00509307581847, 10.045181499910758 55.0132794195071, 10.037395933562696 55.02141335539372, 10.029462782549437 55.02946278254944))", e.toWkt());
    }

    @Test
    public void intersectsSelf() {
        Ellipse e = new Ellipse(55.0, 10.0, 20000, 10000, 0.0);
        assertTrue(e.intersects(e));
    }

    @Test
    public void intersectsNotDistantEllipse() {
        Ellipse e1 = new Ellipse(55.0, 10.0, 20000, 10000, 0.0);
        Ellipse e2 = new Ellipse(-55.0, -10.0, 20000, 10000, 0.0);

        assertFalse(e1.intersects(e2));
        assertFalse(e2.intersects(e1));
    }

    @Test
    public void intersectsContainedEllipse() {
        Ellipse e1 = new Ellipse(55.0, 10.0, 20000, 10000, 0.0);
        Ellipse e2 = new Ellipse(55.0, 10.0, 19999,  9999, 0.0);

        assertTrue(e1.intersects(e2));
        assertTrue(e2.intersects(e1));
    }

    @Test
    public void intersectsIdenticalRotatedEllipse() {
        Ellipse e1 = new Ellipse(55.0, 10.0, 20000, 10000, 0.0);
        Ellipse e2 = new Ellipse(55.0, 10.0, 20000, 10000, 45.0);

        assertTrue(e1.intersects(e2));
        assertTrue(e2.intersects(e1));
    }

}