package dk.dma.nearmiss.engine.geometry;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import static dk.dma.nearmiss.engine.geometry.Ellipse.METERS_PER_DEGREE_LATITUDE;
import static dk.dma.nearmiss.engine.geometry.Ellipse.METERS_PER_DEGREE_LONGITUDE;
import static junit.framework.TestCase.assertTrue;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;

@RunWith(SpringRunner.class)
@SpringBootTest
public class EllipseTest {

    // Debugging tips
    // Use https://www.latlong.net/Show-Latitude-Longitude.html to show position on map
    // Use http://arthur-e.github.io/Wicket/sandbox-gmaps3.html to visualize WKT on map

    public EllipseTest() {
    }

    @Test
    public void canProduceWellKnownText() {
        Ellipse e = new Ellipse(55.0, 10.0, 40000, 5000, 0.0);
        assertEquals("POLYGON ((10.041666666666666 55, 10.041584447017843 55.011301389404125, 10.041338112554769 55.02255817738738, 10.040928635447028 55.03372593855035, 10.040357631713693 55.04476059884177, 10.039627354845631 55.05561860949873, 10.03874068691201 55.066257118913725, 10.037701127186084 55.076634141750375, 10.03651277833516 55.08670872464034, 10.03518033022925 55.09644110780759, 10.033709041432289 55.10579288198208, 10.032104718448991 55.114727139983565, 10.030373692809224 55.12320862237737, 10.028522796080361 55.13120385662732, 10.026559332906196 55.138681289196505, 10.024491052178853 55.145611410074686, 10.022326116457458 55.15196686924082, 10.020073069754238 55.157722584601125, 10.017740803815212 55.162855840976604, 10.015338523028529 55.1673463797495, 10.012875708098957 55.17117647881482, 10.01036207863187 55.17433102252135, 10.007807554774406 55.176797561326254, 10.00522221806518 55.17856636092773, 10.002616271647055 55.179630440681834, 10 55.179985601151905, 9.997383728352945 55.179630440681834, 9.99477778193482 55.17856636092773, 9.992192445225594 55.176797561326254, 9.98963792136813 55.17433102252135, 9.987124291901043 55.17117647881482, 9.984661476971471 55.1673463797495, 9.982259196184788 55.162855840976604, 9.979926930245762 55.157722584601125, 9.977673883542542 55.15196686924082, 9.975508947821147 55.145611410074686, 9.973440667093804 55.138681289196505, 9.971477203919639 55.13120385662732, 9.969626307190776 55.12320862237737, 9.967895281551009 55.114727139983565, 9.966290958567711 55.10579288198208, 9.96481966977075 55.09644110780759, 9.96348722166484 55.08670872464034, 9.962298872813916 55.076634141750375, 9.96125931308799 55.066257118913725, 9.960372645154369 55.05561860949873, 9.959642368286307 55.04476059884177, 9.959071364552972 55.03372593855035, 9.958661887445231 55.02255817738738, 9.958415552982157 55.011301389404125, 9.958333333333334 55, 9.958415552982157 54.988698610595875, 9.958661887445231 54.97744182261262, 9.959071364552972 54.96627406144965, 9.959642368286307 54.95523940115823, 9.960372645154369 54.94438139050127, 9.96125931308799 54.933742881086275, 9.962298872813916 54.923365858249625, 9.96348722166484 54.91329127535966, 9.96481966977075 54.90355889219241, 9.966290958567711 54.89420711801792, 9.967895281551009 54.885272860016435, 9.969626307190776 54.87679137762263, 9.971477203919639 54.86879614337268, 9.973440667093804 54.861318710803495, 9.975508947821147 54.854388589925314, 9.977673883542542 54.84803313075918, 9.979926930245762 54.842277415398875, 9.982259196184788 54.837144159023396, 9.984661476971471 54.8326536202505, 9.987124291901043 54.82882352118518, 9.98963792136813 54.82566897747865, 9.992192445225594 54.823202438673746, 9.99477778193482 54.82143363907227, 9.997383728352945 54.820369559318166, 10 54.820014398848095, 10.002616271647055 54.820369559318166, 10.00522221806518 54.82143363907227, 10.007807554774406 54.823202438673746, 10.01036207863187 54.82566897747865, 10.012875708098957 54.82882352118518, 10.015338523028529 54.8326536202505, 10.017740803815212 54.837144159023396, 10.020073069754238 54.842277415398875, 10.022326116457458 54.84803313075918, 10.024491052178853 54.854388589925314, 10.026559332906196 54.861318710803495, 10.028522796080361 54.86879614337268, 10.030373692809224 54.87679137762263, 10.032104718448991 54.885272860016435, 10.033709041432289 54.89420711801792, 10.03518033022925 54.90355889219241, 10.03651277833516 54.91329127535966, 10.037701127186084 54.923365858249625, 10.03874068691201 54.933742881086275, 10.039627354845631 54.94438139050127, 10.040357631713693 54.95523940115823, 10.040928635447028 54.96627406144965, 10.041338112554769 54.97744182261262, 10.041584447017843 54.988698610595875, 10.041666666666666 55))", e.toWkt());

        e = new Ellipse(55.0, 10.0, 40000, 5000, 45.0);
        assertEquals("POLYGON ((10.029462782549437 54.970537217450556, 10.037395933562692 54.978586644606274, 10.045181499910754 54.9867205804929, 10.052788755520133 54.994906924181535, 10.060187678028363 55.00311336791361, 10.067349067268552 55.01130752460489, 10.07424466050908 55.01945705566247, 10.080847243993759 55.027529798610445, 10.08713076034197 55.035493894020476, 10.093070411385376 55.043317911246405, 10.098642756034863 55.05097097246673, 10.103825802791881 55.05842287454516, 10.108599096538768 55.06564420822861, 10.112943799265828 55.072606474212186, 10.116842764416297 55.079282195612784, 10.120280604556001 55.08564502640789, 10.1232437521005 55.091669855411254, 10.125720512860177 55.09733290537527, 10.12770111219183 55.10261182682896, 10.12917773357475 55.10748578628104, 10.13014454945894 55.11193554844025, 10.130597744263817 55.11594355212825, 10.1305355294365 55.11949397958557, 10.129958150510525 55.12257281889708, 10.12886788613671 55.12516791929059, 10.12726903909045 55.12726903909045, 10.125167919290597 55.12886788613671, 10.122572818897076 55.12995815051053, 10.119493979585563 55.13053552943651, 10.11594355212825 55.13059774426382, 10.111935548440243 55.13014454945895, 10.107485786281032 55.12917773357476, 10.102611826828955 55.12770111219183, 10.097332905375275 55.12572051286018, 10.09166985541124 55.12324375210051, 10.085645026407882 55.120280604556015, 10.079282195612777 55.116842764416305, 10.07260647421218 55.112943799265835, 10.065644208228612 55.10859909653877, 10.058422874545151 55.10382580279189, 10.050970972466722 55.09864275603487, 10.043317911246405 55.093070411385376, 10.035493894020469 55.08713076034198, 10.027529798610445 55.08084724399376, 10.019457055662464 55.07424466050909, 10.011307524604888 55.06734906726855, 10.003113367913599 55.06018767802837, 9.994906924181521 55.05278875552014, 9.986720580492893 55.045181499910754, 9.978586644606274 55.03739593356269, 9.970537217450563 55.02946278254944, 9.9626040664373 55.02141335539373, 9.954818500089239 55.01327941950711, 9.94721124447986 55.00509307581847, 9.93981232197163 54.996886632086394, 9.932650932731448 54.98869247539512, 9.925755339490912 54.98054294433753, 9.919152756006241 54.97247020138956, 9.91286923965803 54.96450610597953, 9.906929588614616 54.956682088753595, 9.90135724396513 54.94902902753327, 9.896174197208119 54.94157712545485, 9.891400903461225 54.934355791771395, 9.887056200734165 54.92739352578782, 9.883157235583695 54.92071780438722, 9.879719395443992 54.91435497359211, 9.876756247899493 54.90833014458875, 9.874279487139823 54.90266709462473, 9.872298887808164 54.897388173171045, 9.87082226642525 54.89251421371897, 9.869855450541053 54.88806445155976, 9.869402255736183 54.88405644787176, 9.869464470563493 54.88050602041443, 9.870041849489475 54.877427181102924, 9.87113211386329 54.87483208070941, 9.87273096090955 54.87273096090956, 9.874832080709403 54.8711321138633, 9.877427181102924 54.870041849489475, 9.88050602041443 54.8694644705635, 9.88405644787175 54.86940225573619, 9.88806445155975 54.86985545054105, 9.892514213718968 54.87082226642525, 9.897388173171038 54.87229888780817, 9.902667094624725 54.87427948713983, 9.908330144588753 54.87675624789949, 9.914354973592111 54.87971939544399, 9.920717804387216 54.883157235583695, 9.927393525787814 54.887056200734165, 9.934355791771381 54.89140090346123, 9.941577125454849 54.89617419720811, 9.949029027533271 54.90135724396514, 9.956682088753588 54.90692958861463, 9.964506105979531 54.91286923965802, 9.972470201389555 54.91915275600625, 9.980542944337529 54.92575533949092, 9.988692475395112 54.932650932731455, 9.996886632086394 54.93981232197163, 10.005093075818472 54.94721124447986, 10.0132794195071 54.954818500089246, 10.021413355393719 54.96260406643731, 10.029462782549437 54.970537217450556))", e.toWkt());
    }

    @Test
    public void intersectsSelf() {
        Ellipse e = new Ellipse(55.0, 10.0, 20000, 10000, 0.0);
        assertTrue(e.intersects(e));
    }

    @Test
    public void intersectsNotDistantEllipse() {
        Ellipse e1 = new Ellipse(55.0, 10.0, 20000, 10000, 0.0);
        Ellipse e2 = new Ellipse(-55.0, -10.0, 20000, 10000, 0.0);

        assertFalse(e1.intersects(e2));
        assertFalse(e2.intersects(e1));
    }

    @Test
    public void intersectsContainedEllipse() {
        Ellipse e1 = new Ellipse(55.0, 10.0, 20000, 10000, 0.0);
        Ellipse e2 = new Ellipse(55.0, 10.0, 19999, 9999, 0.0);

        assertTrue(e1.intersects(e2));
        assertTrue(e2.intersects(e1));
    }

    @Test
    public void intersectsIdenticalRotatedEllipse() {
        Ellipse e1 = new Ellipse(55.0, 10.0, 20000, 10000, 0.0);
        Ellipse e2 = new Ellipse(55.0, 10.0, 20000, 10000, 45.0);

        assertTrue(e1.intersects(e2));
        assertTrue(e2.intersects(e1));
    }

    @Test
    public void correctlyDetectsIntersectionOfEllipsesPlacedVerticallyAboveEachOther() {
        Ellipse e1 = new Ellipse(55.0, 10.0, 0.1 * METERS_PER_DEGREE_LATITUDE, 10000, 0.0);

        Ellipse e2;

        e2 = new Ellipse(55.1, 10.0, 0.1 * METERS_PER_DEGREE_LATITUDE - 1, 10000, 0.0);
        assertFalse(e1.intersects(e2));
        assertFalse(e2.intersects(e1));

        e2 = new Ellipse(55.1, 10.0, 0.1 * METERS_PER_DEGREE_LATITUDE + 1, 10000, 0.0);
        assertTrue(e1.intersects(e2));
        assertTrue(e2.intersects(e1));

        e2 = new Ellipse(55.0999, 10.0, 0.1 * METERS_PER_DEGREE_LATITUDE, 10000, 0.0);
        assertTrue(e1.intersects(e2));
        assertTrue(e2.intersects(e1));

        e2 = new Ellipse(55.1001, 10.0, 0.1 * METERS_PER_DEGREE_LATITUDE, 10000, 0.0);
        assertFalse(e1.intersects(e2));
        assertFalse(e2.intersects(e1));
    }

    @Test
    public void correctlyDetectsIntersectionOfEllipsesPlacedHorizontallyNextToEachOther() {
        Ellipse e1 = new Ellipse(55.0, 10.0, 10000, 0.1 * METERS_PER_DEGREE_LONGITUDE, 0.0);

        Ellipse e2;

        e2 = new Ellipse(55.0, 10.1, 10000, 0.1 * METERS_PER_DEGREE_LONGITUDE - 1, 0.0);
        assertFalse(e1.intersects(e2));
        assertFalse(e2.intersects(e1));

        e2 = new Ellipse(55.0, 10.0, 10000, 0.1 * METERS_PER_DEGREE_LONGITUDE + 1, 0.0);
        assertTrue(e1.intersects(e2));
        assertTrue(e2.intersects(e1));

        e2 = new Ellipse(55.0, 10.0999, 10000, 0.1 * METERS_PER_DEGREE_LONGITUDE, 0.0);
        assertTrue(e1.intersects(e2));
        assertTrue(e2.intersects(e1));

        e2 = new Ellipse(55.0, 10.1001, 10000, 0.1 * METERS_PER_DEGREE_LONGITUDE, 0.0);
        assertFalse(e1.intersects(e2));
        assertFalse(e2.intersects(e1));
    }
}