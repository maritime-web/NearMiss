package dk.dma.nearmiss.engine.engineParts;

import dk.dma.nearmiss.engine.Vessel;
import dk.dma.nearmiss.engine.geometry.GeometryService;
import dk.dma.nearmiss.engine.geometry.geometries.EllipticSafetyZone;
import dk.dma.nearmiss.engine.geometry.geometries.VesselContour;
import dk.dma.nearmiss.helper.Position;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import static org.junit.Assert.*;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class EllipticSafetyZoneDetectorTest {

    @Mock
    private Vessel ownVessel;

    @Mock
    private Vessel otherVessel;

    private GeometryService geometryService = new GeometryService();

    private EllipticSafetyZoneDetector sut; // http://xunitpatterns.com/SUT.html

    @Before
    public void before() {
        when(ownVessel.getCenterPosition()).thenReturn(new Position(55.0, 10.0));
        when(ownVessel.getLoa()).thenReturn(100);
        when(ownVessel.getBeam()).thenReturn(25);
        when(ownVessel.getCog()).thenReturn(90.0);
        when(ownVessel.getSog()).thenReturn(10.0);

        when(otherVessel.getCenterPosition()).thenReturn(new Position(54.0,9.0));
        when(otherVessel.getLoa()).thenReturn(50);
        when(otherVessel.getBeam()).thenReturn(15);
        when(otherVessel.getHdg()).thenReturn(90.0);

        sut = new EllipticSafetyZoneDetector(geometryService, ownVessel);
    }

    @Test
    public void detectsNearMissWithSelf() {
        assertTrue(sut.nearMissDetected(ownVessel));
    }

    @Test
    public void detectsNearMissWithOtherVesselCloseBy() {
        when(otherVessel.getCenterPosition()).thenReturn(new Position(55.0001, 10.0001));
        assertTrue(sut.nearMissDetected(otherVessel));
    }

    @Test
    public void detectsNoNearMissWithOtherVesselFarAway() {
        assertFalse(sut.nearMissDetected(otherVessel));
    }

    @Test
    public void createContour() {
        VesselContour contour = sut.createContour(otherVessel);
        assertEquals("POLYGON ((8.999775 54.00011483785913, 8.999775 53.99988516214087, 9.000135 53.99988516214087, 9.000225 54, 9.000135 54.00011483785913, 8.999775 54.00011483785913))", contour.toWkt());
    }

    @Test
    public void testLocationOfEllipticSafetyZoneRelativeToVesselContour1() {
        // In home waters
        when(ownVessel.getCenterPosition()).thenReturn(new Position(55.0, 10.0));
        when(ownVessel.getSog()).thenReturn((double) 0);
        assertEquals("MULTIPOLYGON ( ((9.999999999999986 54.99921544894197, 10.000105348773872 54.99923052387056, 10.00020664905346 54.99927516933528, 10.000300007925816 54.99934766963595, 10.000381837661827 54.99944523862668, 10.00044899359063 54.99956412678588, 10.00049889494754 54.99969976530825, 10.000529624051403 54.999846941681454, 10.000539999999987 55, 10.000529624051403 55.000153058318546, 10.00049889494754 55.00030023469175, 10.00044899359063 55.00043587321412, 10.000381837661827 55.00055476137332, 10.000300007925816 55.00065233036405, 10.00020664905346 55.00072483066472, 10.000105348773872 55.00076947612944, 9.999999999999986 55.00078455105803, 9.9998946512261 55.00076947612944, 9.999793350946511 55.00072483066472, 9.999699992074156 55.00065233036405, 9.999618162338145 55.00055476137332, 9.999551006409341 55.00043587321412, 9.999501105052431 55.00030023469175, 9.999470375948569 55.000153058318546, 9.999459999999985 55, 9.999470375948569 54.999846941681454, 9.999501105052431 54.99969976530825, 9.999551006409341 54.99956412678588, 9.999618162338145 54.99944523862668, 9.999699992074156 54.99934766963595, 9.999793350946511 54.99927516933528, 9.9998946512261 54.99923052387056, 9.999999999999986 54.99921544894197)), ((9.999803862235492 54.99955, 10.000196137764508 54.99955, 10.000196137764508 55.00027, 10 55.00045, 9.999803862235492 55.00027, 9.999803862235492 54.99955)))", combinedWkt());

        when(ownVessel.getHdg()).thenReturn((double) 45);
        when(ownVessel.getCog()).thenReturn((double) 45);
        assertEquals("MULTIPOLYGON ( ((10.000554761373309 54.99944523862668, 10.000618594621479 54.999530391043315, 10.000658655625259 54.9996335902688, 10.000673404862752 54.99975087041477, 10.000662275529002 54.99987772447099, 10.000625695318085 55.00000927750721, 10.00056506998699 55.00014047401403, 10.000482729333186 55.00026627218328, 10.000381837661827 55.00038183766184, 10.00026627218326 55.00048272933321, 10.000140474014017 55.000565069987005, 10.000009277507196 55.0006256953181, 9.99987772447097 55.00066227552902, 9.999750870414758 55.00067340486276, 9.999633590268786 55.00065865562527, 9.9995303910433 55.00061859462149, 9.999445238626663 55.00055476137332, 9.999381405378493 55.000469608956685, 9.999341344374713 55.0003664097312, 9.999326595137227 55.000249129585235, 9.99933772447097 55.000122275529016, 9.999374304681886 54.99999072249279, 9.999434930012988 54.999859525985975, 9.999517270666786 54.99973372781673, 9.999618162338145 54.99961816233816, 9.999733727816718 54.9995172706668, 9.999859525985961 54.99943493001301, 9.999990722492775 54.9993743046819, 10.000122275529002 54.99933772447099, 10.000249129585221 54.99932659513725, 10.000366409731186 54.99934134437473, 10.00046960895667 54.99938140537851, 10.000554761373309 54.99944523862668)), ((9.999543111605137 54.999820492291796, 9.999820492291796 54.999543111605135, 10.00032960917425 55.00005222848759, 10.000318198051534 55.00031819805153, 10.00005222848759 55.00032960917425, 9.999543111605137 54.999820492291796)))", combinedWkt());

        when(ownVessel.getSog()).thenReturn((double) 12);
        assertEquals("MULTIPOLYGON ( ((10.001219984828168 54.99982678137983, 10.001432803639773 55.00006091956266, 10.001616124572585 55.000307379317654, 10.001762902705948 55.00055668933463, 10.001867497438539 55.00079926876946, 10.001925889253407 55.001025795430515, 10.001935834185872 55.00122756402523, 10.001896950057755 55.00139682069967, 10.001810731164298 55.001527061014755, 10.00168049084921 55.00161327990821, 10.001511234174764 55.00165216403634, 10.00130946558005 55.00164221910387, 10.001082938919012 55.001583827289, 10.000840359484165 55.00147923255641, 10.00059104946719 55.00133245442305, 10.0003445897122 55.00114913349023, 10.000110451529373 55.000936314678626, 9.999897632717769 55.00070217649581, 9.999714311784949 55.00045571674081, 9.999567533651586 55.000206406723834, 9.99946293891901 54.999963827288994, 9.999404547104135 54.99973730062795, 9.999394602171662 54.999535532033235, 9.999433486299779 54.999366275358796, 9.99951970519325 54.99923603504371, 9.999649945508331 54.99914981615024, 9.99981920218277 54.99911093202213, 10.000020970777484 54.99912087695459, 10.000247497438536 54.99917926876947, 10.000490076873376 54.99928386350204, 10.000739386890345 54.99943064163541, 10.000985846645342 54.999613962568226, 10.001219984828168 54.99982678137983)), ((9.999543111605137 54.999820492291796, 9.999820492291796 54.999543111605135, 10.00032960917425 55.00005222848759, 10.000318198051534 55.00031819805153, 10.00005222848759 55.00032960917425, 9.999543111605137 54.999820492291796)))", combinedWkt());

        // TODO this ellipse is not perfectly placed around vessel
        when(ownVessel.getSog()).thenReturn((double) 30);
        assertEquals("MULTIPOLYGON ( ((10.002217843735451 55.00039908870531, 10.002654140892204 55.00085670553743, 10.003052351718551 55.00131805608669, 10.003397173195737 55.001765410910195, 10.003675354027784 55.00218157841297, 10.003876203881319 55.002550565511285, 10.003992004209103 55.00285819223786, 10.00401830486949 55.00309263667011, 10.003954095142845 55.00324488924001, 10.003801842572955 55.00330909896665, 10.003567398140689 55.00328279830627, 10.003259771414115 55.00316699797849, 10.00289078431581 55.00296614812495, 10.002474616813025 55.00268796729291, 10.002027261989518 55.00234314581572, 10.00156591144026 55.001944934989375, 10.001108294608144 55.001508637832615, 10.000671997451391 55.00105102100051, 10.000273786625044 55.00058967045125, 9.99992896514786 55.00014231562774, 9.999650784315811 54.99972614812496, 9.999449934462277 54.99935716102665, 9.999334134134493 54.99904953430008, 9.999307833474106 54.99881508986782, 9.999372043200758 54.99866283729793, 9.999524295770648 54.998598627571276, 9.999758740202907 54.99862492823166, 10.000066366929481 54.99874072855945, 10.000435354027786 54.99894157841298, 10.00085152153057 54.99921975924503, 10.001298876354078 54.999564580722215, 10.001760226903336 54.99996279154856, 10.002217843735451 55.00039908870531)), ((9.999543111605137 54.999820492291796, 9.999820492291796 54.999543111605135, 10.00032960917425 55.00005222848759, 10.000318198051534 55.00031819805153, 10.00005222848759 55.00032960917425, 9.999543111605137 54.999820492291796)))", combinedWkt());

        // At equator (reduces projection effects on visual inspection)

        when(ownVessel.getCenterPosition()).thenReturn(new Position(0.0, 0.0));
        when(ownVessel.getSog()).thenReturn((double) 0);
        assertEquals("MULTIPOLYGON ( ((0.0003181980515339 -0.0003181980515339, 0.0003865767976039 -0.0002375911327911, 0.0004400996141367 -0.0001478537200577, 0.0004767096493089 -0.0000524343717798, 0.000495 0.000045, 0.0004942677782903 0.0001407050470161, 0.0004745411230495 0.0002310028779837, 0.0004365781185756 0.0003124233978983, 0.0003818376618407 0.0003818376618407, 0.0003124233978983 0.0004365781185756, 0.0002310028779837 0.0004745411230495, 0.0001407050470161 0.0004942677782903, 0.000045 0.000495, -0.0000524343717798 0.0004767096493089, -0.0001478537200577 0.0004400996141367, -0.0002375911327911 0.0003865767976039, -0.0003181980515339 0.0003181980515339, -0.0003865767976039 0.0002375911327911, -0.0004400996141367 0.0001478537200577, -0.0004767096493089 0.0000524343717798, -0.000495 -0.000045, -0.0004942677782903 -0.0001407050470161, -0.0004745411230495 -0.0002310028779837, -0.0004365781185756 -0.0003124233978983, -0.0003818376618407 -0.0003818376618407, -0.0003124233978983 -0.0004365781185756, -0.0002310028779837 -0.0004745411230495, -0.0001407050470161 -0.0004942677782903, -0.000045 -0.000495, 0.0000524343717798 -0.0004767096493089, 0.0001478537200577 -0.0004400996141367, 0.0002375911327911 -0.0003865767976039, 0.0003181980515339 -0.0003181980515339)), ((-0.0003977475644174 -0.0002386485386505, -0.0002386485386505 -0.0003977475644174, 0.0002704683438039 0.0001113693180369, 0.0003181980515339 0.0003181980515339, 0.0001113693180369 0.0002704683438039, -0.0003977475644174 -0.0002386485386505)))", combinedWkt());

        when(ownVessel.getSog()).thenReturn((double) 7);
        assertEquals("MULTIPOLYGON ( ((0.0005407687936899 -0.0000956273094325, 0.000696055844234 0.0000718879137846, 0.0008331471278385 0.00024519379359, 0.0009467743033564 0.000417630282214, 0.0010325707421553 0.0005825707421022, 0.0010872393352074 0.0007336766038808, 0.0011086791991401 0.0008651409540228, 0.0010960664120062 0.0009719116912782, 0.0010498856761419 0.0010498856760921, 0.0009719116913279 0.0010960664119565, 0.0008651409540725 0.0011086791990904, 0.0007336766039305 0.0010872393351576, 0.0005825707421519 0.0010325707421056, 0.0004176302822637 0.0009467743033067, 0.0002451937936397 0.0008331471277888, 0.0000718879138343 0.0006960558441842, -0.0000956273093827 0.0005407687936402, -0.0002509143599268 0.0003732535704232, -0.0003880056435313 0.0001999476906178, -0.0005016328190492 0.0000275112019938, -0.0005874292578481 -0.0001374292578944, -0.0006420978509002 -0.000288535119673, -0.0006635377148329 -0.000419999469815, -0.000650924927699 -0.0005267702070704, -0.0006047441918347 -0.0006047441918844, -0.0005267702070207 -0.0006509249277487, -0.0004199994697653 -0.0006635377148826, -0.0002885351196233 -0.0006420978509499, -0.0001374292578447 -0.0005874292578978, 0.0000275112020435 -0.0005016328190989, 0.0001999476906675 -0.000388005643581, 0.0003732535704729 -0.0002509143599765, 0.0005407687936899 -0.0000956273094325)), ((-0.0003977475644174 -0.0002386485386505, -0.0002386485386505 -0.0003977475644174, 0.0002704683438039 0.0001113693180369, 0.0003181980515339 0.0003181980515339, 0.0001113693180369 0.0002704683438039, -0.0003977475644174 -0.0002386485386505)))", combinedWkt());

        when(ownVessel.getSog()).thenReturn((double) 15);
        assertEquals("MULTIPOLYGON ( ((0.0007951353560726 0.0001587392529591, 0.0010497461831583 0.0004255782527181, 0.0012823442862731 0.0006943909520348, 0.001483991050757 0.0009548470296263, 0.0016469373045354 0.0011969373044962, 0.0017649211144571 0.0014113583831471, 0.0018334084288729 0.0015898701837751, 0.0018497673186979 0.0017256125979926, 0.0018133691209702 0.0018133691209466, 0.0017256125980162 0.0018497673186743, 0.0015898701837987 0.0018334084288493, 0.0014113583831707 0.0017649211144335, 0.0011969373045198 0.0016469373045118, 0.0009548470296499 0.0014839910507334, 0.0006943909520584 0.0012823442862496, 0.0004255782527417 0.0010497461831347, 0.0001587392529827 0.000795135356049, -0.0000958715741031 0.0005282963562899, -0.0003284696772179 0.0002594836569732, -0.0005301164417017 -0.0000009724206183, -0.0006930626954802 -0.0002430626954882, -0.0008110465054019 -0.000457483774139, -0.0008795338198177 -0.000635995574767, -0.0008958927096426 -0.0007717379889846, -0.000859494511915 -0.0008594945119385, -0.000771737988961 -0.0008958927096662, -0.0006359955747434 -0.0008795338198413, -0.0004574837741154 -0.0008110465054255, -0.0002430626954646 -0.0006930626955038, -0.0000009724205947 -0.0005301164417253, 0.0002594836569968 -0.0003284696772415, 0.0005282963563135 -0.0000958715741267, 0.0007951353560726 0.0001587392529591)), ((-0.0003977475644174 -0.0002386485386505, -0.0002386485386505 -0.0003977475644174, 0.0002704683438039 0.0001113693180369, 0.0003181980515339 0.0003181980515339, 0.0001113693180369 0.0002704683438039, -0.0003977475644174 -0.0002386485386505)))", combinedWkt());

        when(ownVessel.getSog()).thenReturn((double) 30);
        assertEquals("MULTIPOLYGON ( ((0.0012720726607351 0.000635676557397, 0.0017129155688361 0.0010887476381726, 0.0021245889585318 0.0015366356240739, 0.0024912724523252 0.0019621284309811, 0.0027988746091882 0.0023488746089438, 0.003035574450738 0.0026820117192328, 0.0031922757348065 0.002948737489525, 0.0032629565189262 0.0031388017980496, 0.0032449005802014 0.0032449005800194, 0.0031388017982316 0.0032629565187441, 0.002948737489707 0.0031922757346245, 0.0026820117194148 0.003035574450556, 0.0023488746091258 0.0027988746090062, 0.0019621284311631 0.0024912724521431, 0.0015366356242559 0.0021245889583498, 0.0010887476383547 0.0017129155686541, 0.000635676557579 0.001272072660553, 0.0001948336494779 0.0008190015797774, -0.0002168397402177 0.0003711135938761, -0.0005835232340111 -0.0000543792130311, -0.0008911253908742 -0.0004411253909938, -0.0011278252324239 -0.0007742625012828, -0.0012845265164925 -0.001040988271575, -0.0013552073006121 -0.0012310525800996, -0.0013371513618874 -0.0013371513620694, -0.0012310525799176 -0.0013552073007941, -0.0010409882713929 -0.0012845265166745, -0.0007742625011007 -0.001127825232606, -0.0004411253908118 -0.0008911253910562, -0.0000543792128491 -0.0005835232341931, 0.0003711135940581 -0.0002168397403998, 0.0008190015799594 0.0001948336492959, 0.0012720726607351 0.000635676557397)), ((-0.0003977475644174 -0.0002386485386505, -0.0002386485386505 -0.0003977475644174, 0.0002704683438039 0.0001113693180369, 0.0003181980515339 0.0003181980515339, 0.0001113693180369 0.0002704683438039, -0.0003977475644174 -0.0002386485386505)))", combinedWkt());
    }

    private String combinedWkt() {
        VesselContour safetyZone = sut.createContour(ownVessel);
        EllipticSafetyZone contour = sut.createSafetyZone(ownVessel);

        String safetyZoneWkt = safetyZone.toWkt();
        String contourWkt = contour.toWkt();

        safetyZoneWkt = safetyZoneWkt.replace("POLYGON", "");
        contourWkt = contourWkt.replace("POLYGON", "");

        return String.format("MULTIPOLYGON (%s,%s)", contourWkt, safetyZoneWkt);
    }

}